{"version":3,"sources":["firebase.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","Counter","this","props","handleDecrement","handleIncrement","handleRemoval","start","name","Segment","className","Button","size","icon","onClick","Icon","color","Component","App","state","counters","modalOpen","handleOpen","setState","handleClose","counterId","database","ref","update","count","console","log","handleNewCounter","push","error","remove","handleChange","event","target","value","on","snapshot","val","Object","entries","forEach","id","counter","map","key","Modal","trigger","primary","closeIcon","open","onClose","Content","Form","Field","onChange","placeholder","positive","fluid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75a3e150.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyAWTmf2Ts368C0Bck8fE0ES0vv_AaSZJ1U\",\n  authDomain: \"real-time-counter.firebaseapp.com\",\n  databaseURL: \"https://real-time-counter.firebaseio.com\",\n  projectId: \"real-time-counter\",\n  storageBucket: \"real-time-counter.appspot.com\",\n  messagingSenderId: \"891832645108\",\n  appId: \"1:891832645108:web:482e352680e7334f7535a1\",\n  measurementId: \"G-WB8KSM6QMJ\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(config);\nfirebase.analytics();\n\nexport default firebase;","import React, {Component} from 'react';\nimport { Icon, Segment, Button } from 'semantic-ui-react'\n\n\nclass Counter extends Component {\n\n  render() {\n    //const { count } = this.state;\n    const { handleDecrement, handleIncrement,handleRemoval, start, name} = this.props;\n    return (\n      <Segment>\n        <div className=\"counter\">\n          <div className=\"counter__value\">{start}</div>\n          <div className=\"counter__name\">{name}: </div>\n          <Button size=\"large\" icon onClick={handleIncrement}><Icon name=\"add\" /></Button>\n          <Button size=\"large\" icon onClick={handleDecrement}><Icon name=\"minus\"/></Button>\n          <Button size=\"large\" color=\"red\" icon onClick={handleRemoval}><Icon name=\"trash alternate outline\" /></Button>\n        </div>\n      </Segment>\n  );\n  }\n}\n\nexport default Counter;\n","import React, {Component} from 'react';\nimport './App.css';\nimport firebase from './firebase.js';\nimport Counter from './Counter';\nimport { Button, Modal, Form } from 'semantic-ui-react';\n\nclass App extends Component {\n  state = {\n    counters: {\n\n    },\n    name: '',\n    start: 0,\n    modalOpen: false\n  };\n\n  handleOpen = () => this.setState({ modalOpen: true });\n  handleClose = () => this.setState({ modalOpen: false, name: '', start: 0 });\n\n  handleIncrement = (counterId) => {\n    const {counters} = this.state;\n    const eventRef = firebase.database().ref(`events/event1/counters/${counterId}`);\n    eventRef.update({\n      start: counters[counterId].count + 1\n    });\n    console.log(counters[counterId].count);\n  };\n\n  handleDecrement = (counterId) => {\n    \n    const {counters} = this.state;\n    if (counters[counterId].count < 1) return; \n    const eventRef = firebase.database().ref(`events/event1/counters/${counterId}`);\n    eventRef.update({\n      start: counters[counterId].count - 1\n    });\n  };\n\n  componentDidMount() {\n    const eventRef = firebase.database().ref('events/event1/counters');\n    eventRef.on('value', (snapshot) => {\n      console.log('snapshot', snapshot.val())\n      let counters = {};\n\n      if (snapshot.val()){\n        Object.entries(snapshot.val()).forEach(([id, counter]) => {\n          console.log(id, counter);\n          counters[id] = {\n            name: counter.name,\n            count: counter.start\n          }\n        });\n      }\n       console.log(counters);\n      \n      this.setState({\n        counters: counters\n      });\n      \n    });\n\n  }\n\n  handleNewCounter = () => {\n    console.log('new counter');\n    const {name, start} = this.state;\n    const eventRef = firebase.database().ref('events/event1/counters');\n  \n    //push takes in a callback, called when an error occurs and after the operation completes\n    eventRef.push({\n      name,\n      start\n    }, (error) => {\n      if (error) {\n        console.log('error, need to handle this');\n      } else {\n        this.setState({\n          name: '',\n          start: 0,\n          modalOpen: false\n        })\n      }\n    });\n    \n  };\n\n  handleRemoval = (counterId) => {\n    const eventRef = firebase.database().ref(`events/event1/counters/${counterId}`);\n    eventRef.remove();\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  render() {\n    let {counters, name, start} = this.state;\n    return (\n      <div className=\"App\">\n        {Object.entries(counters).map(([id, counter]) => \n          <Counter \n            start={counter.count} \n            name={counter.name} \n            key={id}\n            handleDecrement={() => this.handleDecrement(id)}\n            handleIncrement={() => this.handleIncrement(id)}\n            handleRemoval={() => this.handleRemoval(id)}\n        />) }\n            <Modal \n              trigger={<Button onClick={this.handleOpen} size=\"massive\" primary>Add new counter</Button>} closeIcon\n              open={this.state.modalOpen}\n              onClose={this.handleClose}\n              >\n              <Modal.Content>\n                <Form>\n                  <Form.Field>\n                    <label>Name:</label>\n                    <input name=\"name\" onChange={this.handleChange} value={name}/>\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Number:</label>\n                    <input name=\"start\" placeholder=\"0\" onChange={this.handleChange} value={start}/>\n                  </Form.Field>\n                  <Button size=\"massive\" positive fluid onClick={this.handleNewCounter}>Create new counter</Button>\n                </Form>\n              </Modal.Content>\n            </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}